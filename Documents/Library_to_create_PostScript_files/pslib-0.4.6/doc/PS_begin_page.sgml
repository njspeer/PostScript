<!doctype refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [

<!-- Process this file with docbook-to-man to generate an nroff manual
     page: `docbook-to-man manpage.sgml > manpage.1'.  You may view
     the manual page with: `docbook-to-man manpage.sgml | nroff -man |
     less'.  A typical entry in a Makefile or Makefile.am is:

manpage.1: manpage.sgml
	docbook-to-man $< > $@

    
	The docbook-to-man binary is found in the docbook-to-man package.
	Please remember that if you create the nroff version in one of the
	debian/rules file targets (such as build), you will need to include
	docbook-to-man in your Build-Depends control field.

  -->

  <!-- Fill in your name for FIRSTNAME and SURNAME. -->
  <!ENTITY dhfirstname "<firstname>UWE</firstname>">
  <!ENTITY dhsurname   "<surname>STEINMANN</surname>">
  <!-- Please adjust the date whenever revising the manpage. -->
  <!ENTITY dhdate      "<date>April 28, 2003</date>">
  <!-- SECTION should be 1-8, maybe w/ subsection other parameters are
       allowed: see man(7), man(1). -->
  <!ENTITY dhsection   "<manvolnum>3</manvolnum>">
  <!ENTITY dhemail     "<email>uwe@steinmann.cx</email>">
  <!ENTITY dhusername  "Uwe Steinmann">
  <!ENTITY dhucpackage "<refentrytitle>PS_BEGIN_PAGE</refentrytitle>">
  <!ENTITY funcname    "PS_begin_page">

  <!ENTITY debian      "<productname>Debian</productname>">
  <!ENTITY gnu         "<acronym>GNU</acronym>">
  <!ENTITY gpl         "&gnu; <acronym>GPL</acronym>">
]>

<refentry>
  <refentryinfo>
    <address>
      &dhemail;
    </address>
    <author>
      &dhfirstname;
      &dhsurname;
    </author>
    <copyright>
      <year>2003</year>
      <holder>&dhusername;</holder>
    </copyright>
    &dhdate;
  </refentryinfo>
  <refmeta>
    &dhucpackage;

    &dhsection;
  </refmeta>
  <refnamediv>
    <refname>&funcname;</refname>

    <refpurpose>Start a new page</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <para>#include &lt;pslib.h&gt;</para>
		<para>void &funcname;(PSDoc *psdoc, float width, float height)</para>
  </refsynopsisdiv>
  <refsect1>
    <title>DESCRIPTION</title>

    <para>Starts a new page. Though the parameters <parameter>width</parameter>
		  and <parameter>height</parameter> imply a different page size for each
			page, this is not possible in PostScript. The first call of
			&funcname;(3) will set
			the page size for the whole document. Consecutive calls will have no
			effect, except for creating a new page. The situation is different
			if you indent to convert the PostScript document into PDF. This function
			places pdfmarks into the document which can set the size for each page
			indiviually. The resulting PDF document will have different page sizes.
			</para>
		<para>Each page is encapsulated into save/restore. This means, that most
		  of the settings made on one page will not be retained on the next page.
			</para>
		<para>If there is up to the first call of &funcname;(3) no call of
		  PS_findfont(3), then the header of the PostScript document will be
			output and the bounding box will be set to the size of the first page.
			If PS_findfont(3) was called before the header has been output already,
			the document will not have a valid bounding box. In order to prevent
			this, one should set the info field 'BoundingBox' and possibly
			`Orientation' before any PS_findfont(3) or PS_begin_page(3) calls.</para>

  </refsect1>
  <refsect1>
    <title>SEE ALSO</title>

    <para>PS_end_page(3), PS_findfont(3), PS_set_info(3)</para>

  </refsect1>
  <refsect1>
    <title>AUTHOR</title>

    <para>This manual page was written by &dhusername; &dhemail;.</para>

  </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:nil
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->


